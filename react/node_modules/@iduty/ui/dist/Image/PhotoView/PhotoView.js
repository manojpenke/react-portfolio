"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const useInitial_1 = __importDefault(require("./hooks/useInitial"));
const useMethods_1 = __importDefault(require("./hooks/useMethods"));
const photo_context_1 = __importDefault(require("./photo-context"));
const PhotoView = ({ src, render, overlay, width, height, triggers = ["onClick"], children, }) => {
    const photoContext = (0, react_1.useContext)(photo_context_1.default);
    const key = (0, useInitial_1.default)(() => photoContext.nextId());
    const originRef = (0, react_1.useRef)(null);
    (0, react_1.useImperativeHandle)(children === null || children === void 0 ? void 0 : children.ref, () => originRef.current);
    (0, react_1.useEffect)(() => {
        return () => {
            photoContext.remove(key);
        };
    }, []);
    function invokeChildrenFn(eventName, e) {
        if (children) {
            const eventFn = children.props[eventName];
            if (eventFn) {
                eventFn(e);
            }
        }
    }
    const fn = (0, useMethods_1.default)({
        render(props) {
            return render && render(props);
        },
        show(eventName, e) {
            photoContext.show(key);
            invokeChildrenFn(eventName, e);
        },
    });
    const eventListeners = (0, react_1.useMemo)(() => {
        const listener = {};
        triggers.forEach((eventName) => {
            listener[eventName] = fn.show.bind(null, eventName);
        });
        return listener;
    }, []);
    (0, react_1.useEffect)(() => {
        photoContext.update({
            key,
            src,
            originRef,
            render: fn.render,
            overlay,
            width,
            height,
        });
    }, [src]);
    if (children) {
        return react_1.Children.only((0, react_1.cloneElement)(children, Object.assign(Object.assign({}, eventListeners), { ref: originRef })));
    }
    return null;
};
exports.default = PhotoView;
