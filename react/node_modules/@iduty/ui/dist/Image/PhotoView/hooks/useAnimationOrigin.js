"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const useMethods_1 = __importDefault(require("./useMethods"));
const variables_1 = require("../variables");
const initialRect = {
    T: 0,
    L: 0,
    W: 0,
    H: 0,
    FIT: undefined,
};
function useAnimationOrigin(visible, originRef, loaded, speed, updateEasing) {
    const [originRect, updateOriginRect] = (0, react_1.useState)(initialRect);
    const [easingMode, updateEasingMode] = (0, react_1.useState)(0);
    const initialTime = (0, react_1.useRef)();
    const fn = (0, useMethods_1.default)({
        OK: () => visible && updateEasingMode(4),
    });
    (0, react_1.useEffect)(() => {
        if (!initialTime.current) {
            initialTime.current = Date.now();
        }
        if (!loaded) {
            return;
        }
        handleUpdateOrigin(originRef, updateOriginRect);
        if (visible) {
            if (Date.now() - initialTime.current < variables_1.maxWaitAnimationTime) {
                updateEasingMode(1);
                requestAnimationFrame(() => {
                    updateEasingMode(2);
                    requestAnimationFrame(() => handleToShape(3));
                });
                setTimeout(fn.OK, speed);
                return;
            }
            updateEasingMode(4);
            return;
        }
        handleToShape(5);
    }, [visible, loaded]);
    function handleToShape(currentShape) {
        updateEasing(false);
        updateEasingMode(currentShape);
    }
    return [easingMode, originRect];
}
exports.default = useAnimationOrigin;
function handleUpdateOrigin(originRef, updateOriginRect) {
    const element = originRef && originRef.current;
    if (element && element.nodeType === 1) {
        const { top, left, width, height } = element.getBoundingClientRect();
        const isImage = element.tagName === 'IMG';
        updateOriginRect({
            T: top,
            L: left,
            W: width,
            H: height,
            FIT: isImage ? getComputedStyle(element).objectFit : undefined,
        });
    }
}
