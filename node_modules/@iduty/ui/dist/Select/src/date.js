"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const app_1 = require("@iduty/app");
const Picker_1 = __importDefault(require("../../Picker"));
;
const SelectDate = ({ title = '', value = '', format = 'yyyy-MM-dd', yearRange = [0, 0], overNow = false, onSubmit = () => { }, }) => {
    const initState = {
        values: [],
        years: [],
        months: [],
        dates: [],
        isLoaded: false,
    };
    const [state, dispatch] = (0, app_1.$reducer)(Object.assign({}, initState));
    (0, react_1.useEffect)(() => {
        initDate();
    }, []);
    const initDate = (preValues) => {
        var _a, _b;
        const defaultMin = (yearRange === null || yearRange === void 0 ? void 0 : yearRange[0]) ? (/-/.test(yearRange === null || yearRange === void 0 ? void 0 : yearRange[0]) ? (_a = yearRange === null || yearRange === void 0 ? void 0 : yearRange[0]) === null || _a === void 0 ? void 0 : _a.split('-').map((v) => parseInt(v, 10)) : [parseInt(yearRange === null || yearRange === void 0 ? void 0 : yearRange[0], 10), 0, 0]) : '';
        const defaultMax = (yearRange === null || yearRange === void 0 ? void 0 : yearRange[1]) ? (/-/.test(yearRange === null || yearRange === void 0 ? void 0 : yearRange[1]) ? (_b = yearRange === null || yearRange === void 0 ? void 0 : yearRange[1]) === null || _b === void 0 ? void 0 : _b.split('-').map((v) => parseInt(v, 10)) : [parseInt(yearRange === null || yearRange === void 0 ? void 0 : yearRange[1], 10), 0, 0]) : '';
        const years = [];
        const months = [];
        const dates = [];
        const vDate = new Date(value || Date.now());
        const values = preValues || (((defaultMin === null || defaultMin === void 0 ? void 0 : defaultMin[1]) && !value) ? [defaultMin[0], defaultMin[1], defaultMin[2]] : [vDate.getFullYear(), vDate.getMonth() + 1, vDate.getDate()]);
        const lastDay = new Date(values[0], values[1], 0);
        const lastDayDate = lastDay.getDate();
        if (lastDayDate < values[2])
            values[2] = lastDayDate;
        const minYear = (defaultMin === null || defaultMin === void 0 ? void 0 : defaultMin[0]) || 1900;
        let maxMonth = 12;
        let maxDay = lastDayDate;
        let maxYear = (yearRange[1] && Math.min(yearRange[1], values[0] + 10)) || values[0] + 10;
        if (defaultMax) {
            maxYear = defaultMax === null || defaultMax === void 0 ? void 0 : defaultMax[0];
            if (defaultMax === null || defaultMax === void 0 ? void 0 : defaultMax[1]) {
                const [y, m] = values;
                if (y === defaultMax[0]) {
                    maxMonth = defaultMax[1];
                    if (m === defaultMax[1] && (defaultMax === null || defaultMax === void 0 ? void 0 : defaultMax[2])) {
                        maxDay = defaultMax[2];
                    }
                }
            }
        }
        else {
            if (overNow) {
                const nowDate = new Date();
                const [currentY, currentM, currentD] = [
                    nowDate.getFullYear(),
                    nowDate.getMonth() + 1,
                    nowDate.getDate(),
                ];
                const [selectedY, selectedM] = values;
                maxYear = Math.min(maxYear, currentY);
                if (currentY === selectedY) {
                    maxMonth = Math.min(maxMonth, currentM);
                    if (currentM <= selectedM) {
                        maxDay = Math.min(maxDay, currentD);
                    }
                }
            }
        }
        if (minYear > maxYear)
            return;
        for (let i = minYear; i <= maxYear; i++) {
            years.push({
                label: `${i}年`,
                value: i,
            });
        }
        let minMonth = 1;
        let minDay = 1;
        if (defaultMin && (defaultMin === null || defaultMin === void 0 ? void 0 : defaultMin[1])) {
            const [y, m] = values;
            if (y === defaultMin[0]) {
                minMonth = defaultMin[1];
                if (m <= defaultMin[1] && (defaultMin === null || defaultMin === void 0 ? void 0 : defaultMin[2])) {
                    minDay = defaultMin[2];
                }
            }
            if ((defaultMax === null || defaultMax === void 0 ? void 0 : defaultMax[0]) && y > (defaultMax === null || defaultMax === void 0 ? void 0 : defaultMax[0])) {
                minMonth = defaultMin[1];
                if (defaultMin === null || defaultMin === void 0 ? void 0 : defaultMin[2])
                    minDay = defaultMin === null || defaultMin === void 0 ? void 0 : defaultMin[2];
            }
            if (y < defaultMin[0]) {
                minMonth = defaultMin[1];
                if (defaultMin === null || defaultMin === void 0 ? void 0 : defaultMin[2])
                    minDay = defaultMin === null || defaultMin === void 0 ? void 0 : defaultMin[2];
            }
        }
        for (let i = minMonth; i <= maxMonth; i++) {
            months.push({
                label: `${i}月`,
                value: i
            });
        }
        for (let i = minDay; i <= maxDay; i++) {
            dates.push({
                label: `${i}日`,
                value: i,
            });
        }
        console.log('values', values);
        dispatch({
            years,
            months,
            dates,
            values,
            isLoaded: true,
        });
    };
    const _onChange = (res) => {
        initDate(res.value);
    };
    const onConfirm = (res) => {
        const opts = JSON.parse(JSON.stringify(res));
        const y = opts.value[0];
        const m = opts.value[1];
        const d = opts.value[2];
        const data = {
            values: opts,
            date: new Date(y, m, d),
            display: format.replace(/yyyy/g, y)
                .replace(/MM/g, m < 10 ? "0" + m : m)
                .replace(/dd/g, d < 10 ? "0" + d : d),
        };
        onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit(data);
    };
    const renderView = () => {
        if (!state.isLoaded)
            return null;
        const config = {
            onSubmit: onConfirm,
            columns: [state.years, state.months, state.dates],
            value: state.values,
            onChange: _onChange,
            title,
            show: true
        };
        return (react_1.default.createElement(Picker_1.default, Object.assign({}, config)));
    };
    return renderView();
};
exports.default = SelectDate;
