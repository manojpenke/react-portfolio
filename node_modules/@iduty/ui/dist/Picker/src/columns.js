"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const react_2 = require("@use-gesture/react");
const web_1 = require("@react-spring/web");
const rubber_1 = require("./rubber");
require("../style.scss");
const Columns = ({ column = [], value, onSelect, }) => {
    const rootRef = (0, react_1.useRef)(null);
    const itemHeight = (0, react_1.useRef)(44);
    const draggingRef = (0, react_1.useRef)(false);
    const [{ y }, api] = (0, web_1.useSpring)(() => ({
        from: { y: 0 },
        config: {
            tension: 400,
            mass: 0.8,
        },
    }));
    (0, react_1.useLayoutEffect)(() => {
        if (draggingRef.current)
            return;
        if (!value)
            return;
        const targetIndex = column.findIndex(item => item.value === value);
        if (targetIndex < 0)
            return;
        const finalPosition = targetIndex * -itemHeight.current;
        api.start({
            y: finalPosition,
            immediate: y.goal !== finalPosition
        });
    }, [value, column]);
    (0, react_1.useLayoutEffect)(() => {
        if (column.length === 0) {
            if (value !== null) {
                onSelect === null || onSelect === void 0 ? void 0 : onSelect(null, null);
            }
        }
        else {
            if (!column.some(item => item.value === value)) {
                const firstItem = column[0];
                onSelect === null || onSelect === void 0 ? void 0 : onSelect(firstItem, 0);
            }
        }
    }, [column, value]);
    (0, react_2.useDrag)((el) => {
        el.event.stopPropagation();
        _onDrag(el);
    }, {
        axis: 'y',
        from: () => [0, y.get()],
        filterTaps: true,
        pointer: { touch: true },
        target: rootRef,
    });
    const _onEnd = (index) => {
        const finalPosition = index * -itemHeight.current;
        api.start({ y: finalPosition });
        const item = column[index];
        if (!item)
            return;
        onSelect === null || onSelect === void 0 ? void 0 : onSelect(item, Math.abs(index));
    };
    const _onDrag = (el) => {
        draggingRef.current = true;
        const min = -((column.length - 1) * itemHeight.current);
        const max = 0;
        if (el.last) {
            draggingRef.current = false;
            const position = el.offset[1] + el.velocity[1] * el.direction[1] * 50;
            const targetIndex = min < max ? -Math.round((0, rubber_1.bound)(position, min, max) / itemHeight.current) : 0;
            _onEnd(targetIndex);
        }
        else {
            const position = el.offset[1];
            api.start({
                y: (0, rubber_1.rubberbandIfOutOfBounds)(position, min, max, itemHeight.current * 50, 0.2)
            });
        }
    };
    const renderOption = () => {
        return (react_1.default.createElement(web_1.animated.div, { style: { translate3d: [0, y, 0] }, className: "__iduty_picker_option" }, column.map((v, k) => (react_1.default.createElement("div", { key: `option_${k}` }, v.label)))));
    };
    const renderView = () => {
        return (react_1.default.createElement("div", { className: "__iduty_picker_column", ref: rootRef }, renderOption()));
    };
    return renderView();
};
exports.default = Columns;
