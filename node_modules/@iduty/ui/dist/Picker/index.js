"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const app_1 = require("@iduty/app");
const Drawer_1 = __importDefault(require("../Drawer"));
const columns_1 = __importDefault(require("./src/columns"));
require("./style.scss");
const react_dom_1 = __importDefault(require("react-dom"));
;
;
const ComponentView = react_1.default.forwardRef(({ show, className = "", title = "", value, columns, onChange, onSubmit, onCancle, }, ref) => {
    const refDrawer = (0, react_1.useRef)(null);
    const initState = {
        y: 0,
        value: null,
        index: null,
        column: null,
        option: null,
    };
    const [state, dispatch] = (0, app_1.$reducer)(Object.assign({}, initState));
    (0, react_1.useEffect)(() => {
        var _a;
        if (show) {
            onShow();
        }
        else {
            (_a = refDrawer === null || refDrawer === void 0 ? void 0 : refDrawer.current) === null || _a === void 0 ? void 0 : _a.close();
        }
    }, [show]);
    (0, react_1.useImperativeHandle)(ref, () => ({
        close: () => {
            var _a;
            (_a = refDrawer === null || refDrawer === void 0 ? void 0 : refDrawer.current) === null || _a === void 0 ? void 0 : _a.close();
        },
        show: () => {
            onShow();
        }
    }));
    const onShow = () => {
        var _a;
        const len = (columns === null || columns === void 0 ? void 0 : columns.length) || 0;
        if (!len)
            return;
        const option = [];
        let current = [];
        if (!value) {
            for (let i = 0; i < len; i++) {
                current.push(columns === null || columns === void 0 ? void 0 : columns[i].value);
                option.push(columns === null || columns === void 0 ? void 0 : columns[i]);
            }
        }
        else {
            current = [...value];
            for (let i = 0; i < len; i++) {
                const cum = columns === null || columns === void 0 ? void 0 : columns[i];
                const column = cum.find((v) => v.value === value[i]);
                option.push(column);
            }
        }
        dispatch({
            value: current,
            option,
        });
        (_a = refDrawer === null || refDrawer === void 0 ? void 0 : refDrawer.current) === null || _a === void 0 ? void 0 : _a.show();
    };
    const _onCancle = () => {
        onCancle === null || onCancle === void 0 ? void 0 : onCancle();
    };
    const _onSubmit = () => {
        var _a;
        (_a = refDrawer === null || refDrawer === void 0 ? void 0 : refDrawer.current) === null || _a === void 0 ? void 0 : _a.close();
        onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit({
            value: state.value,
            option: state.option,
        });
    };
    const _onSelect = (res, index, column) => {
        const value = state.value;
        const option = state.option;
        value[column] = res.value;
        option[column] = res;
        const opts = {
            value,
            index,
            column,
            option
        };
        onChange === null || onChange === void 0 ? void 0 : onChange(Object.assign({}, opts));
        dispatch(Object.assign({}, opts));
    };
    const renderColumns = () => {
        if (!(columns === null || columns === void 0 ? void 0 : columns.length))
            return null;
        return columns === null || columns === void 0 ? void 0 : columns.map((v, k) => {
            var _a;
            return (react_1.default.createElement(columns_1.default, { key: `column_${k}`, column: v, value: ((_a = state === null || state === void 0 ? void 0 : state.value) === null || _a === void 0 ? void 0 : _a[k]) || '', onSelect: (res, index) => {
                    _onSelect(res, index, k);
                } }));
        });
    };
    const renderMask = () => {
        return (react_1.default.createElement("div", { className: "__iduty_picker_mask" },
            react_1.default.createElement("div", null)));
    };
    const renderView = () => {
        return (react_1.default.createElement(Drawer_1.default, { ref: refDrawer, className: `__iduty_picker ${className}`, header: {
                title,
                onRight: () => {
                    _onSubmit();
                },
                autoRight: false,
            }, onClose: () => {
                _onCancle === null || _onCancle === void 0 ? void 0 : _onCancle();
            } },
            react_1.default.createElement("div", { className: "__iduty_picker_view" },
                renderColumns(),
                renderMask())));
    };
    return react_dom_1.default.createPortal(renderView(), document.getElementById('__components'));
});
exports.default = ComponentView;
