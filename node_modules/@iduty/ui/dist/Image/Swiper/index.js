"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const app_1 = require("@iduty/app");
require("./style.scss");
;
function getPage(event, page) {
    return event.changedTouches[0][page];
}
let timer = null;
const ComponentView = ({ className = '', images, auto = true, safe = 100, duration = 5000, bar = true, }) => {
    const $swiper = (0, react_1.useRef)(null);
    const animate = '.3s';
    const initState = {
        show: false,
        current: 2,
        images: [],
        total: 0,
        width: 0,
        touch: {},
        themes: {},
    };
    const [state, dispatch] = (0, app_1.$reducer)(Object.assign({}, initState));
    (0, react_1.useEffect)(() => {
        return () => {
            timer && clearTimeout(timer);
        };
    }, []);
    (0, react_1.useEffect)(() => {
        var _a;
        if (timer)
            clearTimeout(timer);
        if (!(images === null || images === void 0 ? void 0 : images.length)) {
            dispatch(Object.assign({}, initState));
            return;
        }
        let imgs = [...images];
        if (images.length > 1) {
            const len = imgs.length;
            const last = [imgs[len - 1]];
            imgs.push(imgs[0]);
            imgs = last.concat(imgs);
        }
        const total = imgs.length;
        const w = (_a = $swiper === null || $swiper === void 0 ? void 0 : $swiper.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().width;
        dispatch({
            images: imgs,
            show: true,
            width: w,
            total,
            themes: {
                'width': (w * total) + 'px',
                'WebkitTransform': 'translate3d(-' + w + 'px, 0, 0)',
                'WebkitTransitionTimingFunction': 'ease-in-out',
                'WebkitTransitionDuration': '0',
            }
        });
        _onTimer({
            current: 3,
            themes: {
                'width': (w * total) + 'px',
                'WebkitTransform': 'translate3d(-' + w * 2 + 'px, 0, 0)',
                'WebkitTransitionTimingFunction': 'ease-in-out',
                'WebkitTransitionDuration': animate,
            }
        });
    }, [images]);
    const _transitionEnd = () => {
        if (timer)
            clearTimeout(timer);
        const opts = {
            themes: Object.assign(Object.assign({}, state.themes), { 'WebkitTransitionTimingFunction': 'ease-in-out', 'WebkitTransitionDuration': animate })
        };
        if (state.current === 1) {
            dispatch({
                current: state.total - 1,
                themes: Object.assign(Object.assign({}, state.themes), { 'WebkitTransform': 'translate3d(-' + state.width * (state.total - 2) + 'px, 0, 0)', 'WebkitTransitionDuration': '0s' })
            });
            opts.current = state.total - 1;
            opts.themes.WebkitTransform = 'translate3d(-' + state.width * (state.total - 1) + 'px, 0, 0)';
        }
        else if (state.current === state.total) {
            dispatch({
                current: 2,
                themes: Object.assign(Object.assign({}, state.themes), { 'WebkitTransform': 'translate3d(-' + state.width + 'px, 0, 0)', 'WebkitTransitionDuration': '0s' })
            });
            opts.current = 3;
            opts.themes.WebkitTransform = 'translate3d(-' + state.width * 2 + 'px, 0, 0)';
        }
        else {
            opts.current = state.current + 1;
            opts.themes.WebkitTransform = 'translate3d(-' + state.width * state.current + 'px, 0, 0)';
        }
        _onTimer(Object.assign({}, opts));
    };
    const _onTimer = (opts) => {
        if (!auto)
            return;
        timer = setTimeout(() => {
            dispatch(Object.assign({}, opts));
        }, duration);
    };
    const _touchStart = (0, react_1.useCallback)((e) => {
        if (timer)
            clearTimeout(timer);
        const basePageX = getPage(e, 'pageX');
        dispatch({
            touch: Object.assign(Object.assign({}, state.touch), { distX: 0, basePageX })
        });
    }, [state.touch]);
    const _touchMove = (0, react_1.useCallback)((e) => {
        if (timer)
            clearTimeout(timer);
        let { basePageX, direction } = state.touch;
        const width = state.width;
        const pageX = getPage(e, 'pageX');
        const distX = pageX - basePageX;
        const current = state.current;
        let moveDistX = 0;
        if (distX > 0) {
            direction = 'right';
            if (current == 1) {
                moveDistX = Math.round(distX / 5);
            }
            else {
                moveDistX = -(((current - 1) * width) - distX);
            }
        }
        else {
            direction = 'left';
            if (distX >= -width) {
                if (current == state.pageNum) {
                    moveDistX = -((current - 1) * width) + Math.round(distX / 5);
                }
                else {
                    moveDistX = distX + (-((current - 1) * width));
                }
            }
            else {
                moveDistX = -(current * width) + Math.round((distX + width) / 5);
            }
        }
        dispatch({
            themes: Object.assign(Object.assign({}, state.themes), { 'WebkitTransform': 'translate3d(' + moveDistX + 'px, 0, 0)', 'WebkitTransitionTimingFunction': 'ease-in-out', 'WebkitTransitionDuration': '0s' }),
            touch: Object.assign(Object.assign({}, state.touch), { distX: Math.abs(distX), moveDistX,
                direction })
        });
    }, [state.touch]);
    const _touchEnd = (0, react_1.useCallback)((orientation) => {
        if (timer)
            clearTimeout(timer);
        let { direction } = state.touch;
        const page = state.total;
        const width = state.width;
        let cur = state.current;
        if (direction !== 'left' && direction !== 'right' && orientation !== 'left' && orientation !== 'right')
            return;
        let moveX = 0;
        if (direction === 'left' || orientation === 'left') {
            if (state.touch.distX < safe) {
                moveX = width * (cur - 1);
            }
            else {
                if (cur < page) {
                    cur = cur + 1;
                    moveX = width * (cur - 1);
                }
                if (cur >= page) {
                    cur = page;
                    moveX = width * (cur - 1);
                }
            }
        }
        if (direction === 'right' || orientation === 'right') {
            if (state.touch.distX < safe) {
                moveX = width * (cur - 1);
            }
            else {
                if (cur > 1) {
                    cur = cur - 1;
                    moveX = width * (cur - 1);
                }
                if (cur == 1) {
                    cur = 1;
                    moveX = 0;
                }
            }
        }
        dispatch({
            current: cur,
            themes: Object.assign(Object.assign({}, state.themes), { 'WebkitTransform': 'translate3d(-' + moveX + 'px, 0, 0)', 'WebkitTransitionTimingFunction': 'ease-in-out', 'WebkitTransitionDuration': animate }),
            touch: Object.assign(Object.assign({}, state.touch), { direction: '' })
        });
    }, [state.touch]);
    const renderBar = () => {
        if (!bar || images.length === 1)
            return null;
        return (react_1.default.createElement("div", { className: "that_bar" }, images === null || images === void 0 ? void 0 : images.map((v, k) => {
            let cn = '';
            if (state.current - 2 == k)
                cn = 'active';
            return (react_1.default.createElement("i", { className: cn, key: `bar_${k}` }));
        })));
    };
    const renderImage = () => {
        var _a;
        return (_a = state.images) === null || _a === void 0 ? void 0 : _a.map((v, k) => (react_1.default.createElement("li", { key: `img_${k}`, style: {
                width: state.width || 'auto'
            } },
            react_1.default.createElement("img", { src: v }))));
    };
    const renderImages = () => {
        if (images.length === 1) {
            return (react_1.default.createElement("ul", null, renderImage()));
        }
        return (react_1.default.createElement("ul", { style: Object.assign({}, state.themes), onTouchStart: _touchStart, onTouchMove: _touchMove, onTouchEnd: _touchEnd, onTransitionEnd: _transitionEnd }, renderImage()));
    };
    const renderView = () => {
        if (!images.length)
            return null;
        return (react_1.default.createElement("section", { ref: $swiper, className: `__iduty_swiper ${className}` }, state.show && (react_1.default.createElement(react_1.default.Fragment, null,
            renderImages(),
            renderBar()))));
    };
    return renderView();
};
exports.default = ComponentView;
