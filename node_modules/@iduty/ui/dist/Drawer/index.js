"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const app_1 = require("@iduty/app");
const Mask_1 = __importDefault(require("../Mask"));
const Button_1 = __importDefault(require("../Button"));
require("./style.scss");
const ComponentView = react_1.default.forwardRef(({ className = '', position = 'bottom', children, show = false, height, width, header, footer, onClose, }, ref) => {
    const initState = {
        show: false,
        hide: true,
    };
    const [state, dispatch] = (0, app_1.$reducer)(Object.assign({}, initState));
    (0, react_1.useEffect)(() => {
        if (!show) {
            dispatch(Object.assign({}, initState));
            return;
        }
        dispatch({
            show: true,
            hide: false,
        });
    }, [show]);
    (0, react_1.useImperativeHandle)(ref, () => ({
        close: (callback, auto = true) => {
            onHide(callback, auto);
        },
        show: () => {
            dispatch({
                show: true,
                hide: false,
            });
        }
    }));
    const onHide = (callback, auto = true) => {
        if (auto) {
            dispatch({ hide: true });
            setTimeout(() => {
                dispatch({ show: false });
                if (callback) {
                    callback === null || callback === void 0 ? void 0 : callback();
                }
                else {
                    __onClose();
                }
            }, 300);
        }
        else {
            if (callback) {
                callback === null || callback === void 0 ? void 0 : callback();
            }
            else {
                __onClose();
            }
        }
    };
    const __onClose = () => {
        onClose === null || onClose === void 0 ? void 0 : onClose();
    };
    const _onLeft = () => {
        var _a;
        if ((header === null || header === void 0 ? void 0 : header.btnLeft) === false)
            return;
        if ((header === null || header === void 0 ? void 0 : header.autoLeft) !== undefined && !(header === null || header === void 0 ? void 0 : header.autoLeft)) {
            (_a = header === null || header === void 0 ? void 0 : header.onLeft) === null || _a === void 0 ? void 0 : _a.call(header);
            return;
        }
        onHide(() => {
            var _a;
            (_a = header === null || header === void 0 ? void 0 : header.onLeft) === null || _a === void 0 ? void 0 : _a.call(header);
            __onClose();
        });
    };
    const onRight = () => {
        var _a;
        if ((header === null || header === void 0 ? void 0 : header.btnRight) === false)
            return;
        if ((header === null || header === void 0 ? void 0 : header.autoRight) !== undefined && !(header === null || header === void 0 ? void 0 : header.autoRight)) {
            (_a = header === null || header === void 0 ? void 0 : header.onRight) === null || _a === void 0 ? void 0 : _a.call(header);
            return;
        }
        onHide(() => {
            var _a;
            (_a = header === null || header === void 0 ? void 0 : header.onRight) === null || _a === void 0 ? void 0 : _a.call(header);
            __onClose();
        });
    };
    const renderFooter = () => {
        if (!footer)
            return null;
        const type = {
            0: footer.length === 2 ? 'disable' : 'active_block',
            1: 'active_block'
        };
        return (react_1.default.createElement("div", { className: "that_footer" }, footer.map((v, k) => {
            return (react_1.default.createElement(Button_1.default, { key: `btn_${k}`, text: v.text, type: type[k], className: "that_btn", onClick: () => {
                    var _a;
                    (_a = v.onClick) === null || _a === void 0 ? void 0 : _a.call(v);
                } }));
        })));
    };
    const renderView = () => {
        if (!state.show)
            return null;
        let cn = '';
        let __class = {};
        switch (position) {
            case 'bottom':
                __class = {
                    left: 0,
                    bottom: 0,
                    width: '100%',
                    padding: '10px 0',
                    borderTopLeftRadius: '7px',
                    borderTopRightRadius: '7px',
                };
                if (height) {
                    __class.height = height;
                    __class.maxHeight = '90%';
                }
                else {
                    __class.maxHeight = '50%';
                }
                cn = state.hide ? '__iduty_bottom_hide' : '__iduty_bottom_show';
                break;
            case 'top':
                __class = {
                    left: 0,
                    top: 0,
                    width: '100%',
                };
                if (height) {
                    __class.height = height;
                    __class.maxHeight = '90%';
                }
                else {
                    __class.maxHeight = '50%';
                }
                cn = state.hide ? '__iduty_top_hide' : '__iduty_top_show';
                break;
            case 'left':
                __class = {
                    left: 0,
                    top: 0,
                    height: '100%',
                };
                if (width) {
                    __class.width = width;
                    __class.maxWidth = '100%';
                }
                else {
                    __class.maxWidth = '50%';
                }
                cn = state.hide ? '__iduty_left_hide' : '__iduty_left_show';
                break;
            case 'right':
                __class = {
                    top: 0,
                    right: 0,
                    height: '100%',
                };
                if (width) {
                    __class.width = width;
                    __class.maxWidth = '100%';
                }
                else {
                    __class.maxWidth = '50%';
                }
                cn = state.hide ? '__iduty_right_hide' : '__iduty_right_show';
                break;
        }
        let _header = null;
        let _btn = false;
        if (header) {
            _header = Object.assign({}, header);
            if (_header.btnLeft === undefined)
                _header.btnLeft = react_1.default.createElement(react_1.default.Fragment, null, "\uE644");
            if (_header.btnRight === undefined)
                _header.btnRight = '确定';
            if (_header.btnLeft || _header.btnRight)
                _btn = true;
        }
        return (react_1.default.createElement("div", null,
            react_1.default.createElement(Mask_1.default, { onClick: onHide, show: !state.hide }),
            react_1.default.createElement("div", { className: `__iduty_drawer ${cn} ${className}`, style: __class },
                _header && (react_1.default.createElement("h4", null,
                    _btn &&
                        react_1.default.createElement("div", { className: 'h4_left', onClick: _onLeft }, _header.btnLeft),
                    react_1.default.createElement("div", { className: 'h4_mid' }, _header.title),
                    _btn &&
                        react_1.default.createElement("div", { className: 'h4_right', onClick: onRight }, _header.btnRight))),
                react_1.default.createElement("section", null, children),
                renderFooter())));
    };
    return renderView();
});
exports.default = ComponentView;
